#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <netdb.h>
#include <netinet/in.h>
#include "mylist.h"
#include "my.h"

void mybzero(s1, n)
	void *s1;
	unsigned n;
{
	register char *t = s1;

	while (n != 0) 
	{
		*t++ = 0;
		n--;
	}
}

void doprocessing (int sock)
{
	int n;
	char buffer[256];
	mybzero(buffer,256);
	n = read(sock,buffer,255);
	if (n < 0)
	{
		my_str("ERROR reading from socket");
		exit(1);
	}
	//print message
	my_str(buffer);
	n = write(sock,"I got your message",18);
	if (n < 0)
	{
		my_str("ERROR writing to socket");
		exit(1);
	}	
}

int main(int argc, char *argv[])
{
	int sockfd, newsockfd, portno;
	unsigned int clilen;
	char buffer[256];
	struct sockaddr_in serv_addr, cli_addr;
	int n, pid;

	if (argc < 2)
	{
		my_str("Not enough arugments. Please specify a port number");
		exit(1);
	}
	else
	{
		portno = my_atoi(argv[1]);
	}
	/* First call to socket() function */
	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if (sockfd < 0) 
	{
		my_str("Error, problem opening socket.");
		exit(1);
	}

	mybzero((char *) &serv_addr, sizeof(serv_addr));

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(portno);

	/* Now bind the host address using bind() call.*/
	if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
	{
		my_str("Error! problem with binding");
		exit(1);
	}

	/* Now start listening for the clients, here
	* process will go in sleep mode and will wait
	* for the incoming connection
	*/
	listen(sockfd,5);
	clilen = sizeof(cli_addr);
	while (1) 
	{
		newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
		if (newsockfd < 0)
		{
			my_str("ERROR on accept");
			exit(1);
		}
		/* Create child process */
		pid = fork();
		if (pid < 0)
		{
			my_str("ERROR on fork");
			exit(1);
		}
		if (pid == 0)
		{
			/* This is the client process */
			close(sockfd);
			doprocessing(newsockfd);
			exit(0);
		}
		else
		{
			close(newsockfd);
		}	
	} /* end of while */	
}
