#include <mylist.h>
#include "my.h"
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#define MAXMSG  512
void mybzero(s1, n)
	void *s1;
	unsigned n;
{
	register char *t = s1;

	while (n != 0) 
	{
		*t++ = 0;
		n--;
	}
}


int main(int argc , char *argv[])
{
  int sock;
  fd_set active_fd_set, read_fd_set;
  int i, portno;
  struct sockaddr_in serv_addr, clientname;
  socklen_t size;

  if(argc < 2)
  {
	my_str("give me a port number too");
	exit(0);
  }
  else
  {
	portno = my_atoi(argv[1]);
  }
  /* Create the socket and set it up to accept connections. */
  sock = socket(AF_INET, SOCK_STREAM, 0);
  mybzero((char*) &serv_addr, sizeof(serv_addr));
    
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

   if (bind(sock, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
	{
		my_str("Error! problem with binding");
		exit(1);
	}
    if (listen (sock, 1) < 0)
    {
      my_str("listen");
      exit (0);
    }
  /* Initialize the set of active sockets. */
  FD_ZERO (&active_fd_set);
  FD_SET (sock, &active_fd_set);

  while (1)
    {
      /* Block until input arrives on one or more active sockets. */
      read_fd_set = active_fd_set;
      if (select (FD_SETSIZE, &read_fd_set, NULL, NULL, NULL) < 0)
        {
          my_str("select");
          exit (0);
        }

      /* Service all the sockets with input pending. */
      for (i = 0; i < FD_SETSIZE; ++i)
        if (FD_ISSET (i, &read_fd_set))
          {
            if (i == sock)
              {
                /* Connection request on original socket. */
                int new;
                size = sizeof (clientname);
                new = accept (sock, (struct sockaddr *) &clientname, &size);
                if (new < 0)
                  {
                    my_str("accept");
                    exit (0);
                  }
                FD_SET (new, &active_fd_set);
              }
            else
              {
		my_str("Got into else\n");
                /* Data arriving on an already-connected socket. */
			char *buffer = (char*)malloc(sizeof(char) * 512);
  			int nbytes;

			  nbytes = read (i, buffer, MAXMSG);
			  if (nbytes < 0)
			    {
			      /* Read error. */
			      my_str("read");
			      close(i);
			      FD_CLR(i, &active_fd_set);
			    }
			  else if (my_strcmp(buffer,"/exit") == 0)
			   {/* End-of-file. */
			    close(i);
			    FD_CLR(i, &active_fd_set);
			    free(buffer);
			    }
			  else
			    {
			      /* Data read. */
			      my_str("Server: got message: ");
			      my_str(buffer);
			      my_str("\n");
			    }
              }
          }
    }
}
